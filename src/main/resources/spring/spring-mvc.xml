<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">


    <!-- 一般使用<context:component-scan/>来代替 <context:annotation-config/>，因为前者不仅配置扫描包路径选项还自动注入了下述processor的功能。
        详解：
        <context:annotation-config/>向 Spring 容器注册AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor、
        PersistenceAnnotationBeanPostProcessor、 RequiredAnnotationBeanPostProcessor 这 4 个BeanPostProcessor。目的是为了你的系统能够识别相应的注解。
        例如：@Autowired注解，对应 AutowiredAnnotationBeanPostProcessor的Bean。传统声明方式如下<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor "/>
            @Resource 、@PostConstruct、@PreDestroy对应CommonAnnotationBeanPostProcessor
            @PersistenceContext对应PersistenceAnnotationBeanPostProcessor的Bean。
            @Required对应RequiredAnnotationBeanPostProcessor的Bean。
        一般来说，这些注解我们还是比较常用，尤其是Antowired的注解，在自动注入的时候更是经常使用，所以如果总是需要按照传统的方式一条一条配置显得有些繁琐和没有必要，
        于是spring给我们提供<context:annotation-config/>的简化配置方式，自动帮你完成声明。 不过，呵呵，我们使用注解一般都会配置扫描包路径选项
        <context:component-scan base-package=”XX.XX”/>该配置项其实也包含了自动注入上述processor的功能，因此当使用 <context:component-scan/> 后，就可以将 <context:annotation-config/> 移除了。
     -->
    <!-- 注解扫描包 -->
    <context:component-scan base-package="com" />

    <!-- 开启注解 -->
    <!-- 会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,是spring MVC为@Controllers分发请求所必须的。
        并提供了：数据绑定支持，@NumberFormatannotation支持，@DateTimeFormat支持，@Valid支持，读写XML的支持（JAXB），读写JSON的支持（Jackson）。
        后面，我们处理响应ajax请求时，就使用到了对json的支持。
        后面，对action写JUnit单元测试时，要从spring IOC容器中取DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean，来完成测试，
            取的时候要知道是<mvc:annotation-driven />这一句注册的这两个bean。
     -->
    <mvc:annotation-driven />

    <!--
        配置静态资源，直接映射到对应的文件夹，不被DispatcherServlet拦截而出现404找不到图片的问题，3.04新增功能，需要重新设置spring-mvc-3.0.xsd
    -->
    <mvc:resources mapping="/img/**" location="/img/" />
    <mvc:resources mapping="/js/**" location="/js/" />
    <mvc:resources mapping="/css/**" location="/css/" />
    <mvc:resources mapping="/html/**" location="/html/" />
    　　<!-- 当上面要访问的静态资源不包括在上面的配置中时，则根据此配置来访问 -->
    　　<mvc:default-servlet-handler/>
    <!-- 定义跳转的文件的前后缀 ，视图模式配置-->
    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
        <property name="prefix" value="/WEB-INF/jsp/" />
        <property name="suffix" value=".jsp" />
    </bean>
</beans>